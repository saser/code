// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: tasks/tasks.proto

package tasks_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A task is a single action that can be completed.
type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the task.
	// Format: tasks/{task}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The task under which this task is ordered. Optional. Used to build up a
	// hierarchy of tasks.
	// Format: tasks/{task}
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// The title of the task. Must be a short string.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// The description of the task. Can be a long string. Not all tasks have
	// descriptions.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The set of labels attached to the task. Use ModifyTaskLabels to change
	// this set. As this is a set, each value only occurs once and the order is
	// undefined.
	// Format: labels/{label}
	Labels []string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`
	// When the task was completed. A task is considered completed if any only
	// if this is a valid timestamp.
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	// When the task was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the task was last updated, if ever.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// When the task was last soft deleted, if ever.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// When the task will be permanently deleted after being soft deleted.
	ExpireTime    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_tasks_tasks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Task) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *Task) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Task) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Task) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Task) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

// A project is a container of tasks. Projects map to the GTD concept of a
// project: something that requires more than one action to complete.
type Project struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: projects/{project}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The title of the project. Must be a short string.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The description of the project. Can be a long string. Not all tasks have
	// descriptions.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// When the project was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the project was last updated, if ever.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// When the project was last soft deleted, if ever.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// When the project will be permanently deleted after being soft deleted.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// When the project was archived, if ever. If a project is archived and
	// later unarchived this timestamp will be empty.
	ArchiveTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=archive_time,json=archiveTime,proto3" json:"archive_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_tasks_tasks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Project) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Project) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Project) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Project) GetArchiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchiveTime
	}
	return nil
}

// A label can be attached to tasks (not projects) to allow for some flexibility
// in organizing and listing tasks. Attaching a label to a task carries no
// semantic meaning otherwise.
type Label struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name.
	// Format: labels/{label}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The actual label string used by humans. Must be unique. It should be
	// non-empty, short, and is only allowed to contain:
	// * alphanumeric characters (a-z, A-Z, 0-9)
	// * certain special characters: ':', '-', '_', '@'
	//
	// Examples:
	// * email
	// * Agendas:Boss
	// * online_work
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// When the label was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// When the label was last updated, if ever.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_tasks_tasks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Label) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Label) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type GetTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: tasks/{task}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The standard page size. Optional. If unspecified, the server will choose
	// a suitable default. Values larger than 1000 will be truncated to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The standard page token. Optional. Get the values from responses to
	// ListTasks.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Whether soft deleted resources should be included in the response.
	ShowDeleted   bool `protobuf:"varint,3,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *ListTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTasksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTasksRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

type ListTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tasks.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// The token required to get the next page in a subsequent call to
	// ListTasks.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_tasks_tasks_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{5}
}

func (x *ListTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ListTasksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The task to be created. The `name` field will be ignored. The `title`
	// field must not be empty, and the `completed` field, if specified, must be
	// false.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The task to be updated. The `name` field is used to specify which task to
	// update. Only fields with non-default values will be updated, as long as
	// they are specified in `update_mask`.
	//
	// Note that trying to update the `completed` field is an error -- there are
	// separate RPCs for that.
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// A field mask of which fields to update. A nil or empty field mask will be
	// interpreted as updating all fields specified in `task`. Specifying a
	// single `*` means doing a full replacement of the task.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *UpdateTaskRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: tasks/{task}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether to force a cascading delete. If the named task has any child
	// tasks, and `force` is omitted or set to false, the deletion will fail. If
	// `force` is set to true, the named task will be deleted along with all
	// child tasks in a recursive fashion.
	Force         bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteTaskRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UndeleteTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: tasks/{task}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether to force a cascading undelete of ancestors. If the named task has
	// at least one deleted ancestor, and `undelete_ancestors` is omitted or set
	// to false, the undeletion will fail. If `undelete_ancestors` is set to
	// true, the named task will be undeleted along with all deleted ancestors,
	// direct or transitive.
	UndeleteAncestors bool `protobuf:"varint,2,opt,name=undelete_ancestors,json=undeleteAncestors,proto3" json:"undelete_ancestors,omitempty"`
	// Whether to also undelete any deleted descendant (direct or transitive)
	// tasks of the named task. Unlike `undelete_ancestors`, it is valid to omit
	// `undelete_descendants` or set it to false even if the named task has
	// deleted descendants.
	UndeleteDescendants bool `protobuf:"varint,3,opt,name=undelete_descendants,json=undeleteDescendants,proto3" json:"undelete_descendants,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UndeleteTaskRequest) Reset() {
	*x = UndeleteTaskRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteTaskRequest) ProtoMessage() {}

func (x *UndeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*UndeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{9}
}

func (x *UndeleteTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UndeleteTaskRequest) GetUndeleteAncestors() bool {
	if x != nil {
		return x.UndeleteAncestors
	}
	return false
}

func (x *UndeleteTaskRequest) GetUndeleteDescendants() bool {
	if x != nil {
		return x.UndeleteDescendants
	}
	return false
}

type CompleteTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The task to complete.
	// Format: tasks/{task}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether to force a cascading completion. If the named task has any child
	// tasks that are not completed, and `force` is omitted or set to false, the
	// completion will fail. If `force` is set to true, the task will be
	// completed along with any uncompleted descendant tasks, direct or
	// transitive.
	Force         bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteTaskRequest) Reset() {
	*x = CompleteTaskRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteTaskRequest) ProtoMessage() {}

func (x *CompleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteTaskRequest.ProtoReflect.Descriptor instead.
func (*CompleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{10}
}

func (x *CompleteTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompleteTaskRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ModifyTaskLabelsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The task to modify labels for.
	// Format: tasks/{task}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The names of labels to add. These labels are guaranteed to be present on
	// the task when ModifyTaskLabels completes successfully. `add_labels` is
	// treated like a set so specifying the same label multiple times is
	// equivalent to specifying it once.
	//
	// If a label is present in both `add_labels` and `remove_labels` an error
	// is returned.
	//
	// Format: labels/{label}
	AddLabels []string `protobuf:"bytes,2,rep,name=add_labels,json=addLabels,proto3" json:"add_labels,omitempty"`
	// The names of labels to add. These labels are guaranteed to not be present
	// on the task when ModifyTaskLabels completes successfully. `remove_labels`
	// is treated like a set so specifying the same label multiple times is
	// equivalent to specifying it once.
	//
	// If a label is present in both `add_labels` and `remove_labels` an error
	// is returned.
	//
	// Format: labels/{label}
	RemoveLabels  []string `protobuf:"bytes,3,rep,name=remove_labels,json=removeLabels,proto3" json:"remove_labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyTaskLabelsRequest) Reset() {
	*x = ModifyTaskLabelsRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyTaskLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTaskLabelsRequest) ProtoMessage() {}

func (x *ModifyTaskLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTaskLabelsRequest.ProtoReflect.Descriptor instead.
func (*ModifyTaskLabelsRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyTaskLabelsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyTaskLabelsRequest) GetAddLabels() []string {
	if x != nil {
		return x.AddLabels
	}
	return nil
}

func (x *ModifyTaskLabelsRequest) GetRemoveLabels() []string {
	if x != nil {
		return x.RemoveLabels
	}
	return nil
}

type UncompleteTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The task to uncomplete.
	// Format: tasks/{task}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether to force a cascading uncompletion of ancestors. If the named task
	// has at least one completed ancestor (direct or transitive), and
	// `uncomplete_ancestors` is omitted or set to false, the undeletion will
	// fail. If `uncomplete_ancestors` is set to true, the named task will be
	// uncompleted along with all completed ancestors, direct or transitive.
	UncompleteAncestors bool `protobuf:"varint,2,opt,name=uncomplete_ancestors,json=uncompleteAncestors,proto3" json:"uncomplete_ancestors,omitempty"`
	// Whether to force a cascading uncompletion of descendants, direct or
	// transitive. Unlike `uncomplete_ancestors` it is valid to either omit
	// `undelete_descendants` or set it to false even if the task has
	// uncompleted descendants.
	UncompleteDescendants bool `protobuf:"varint,3,opt,name=uncomplete_descendants,json=uncompleteDescendants,proto3" json:"uncomplete_descendants,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UncompleteTaskRequest) Reset() {
	*x = UncompleteTaskRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UncompleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompleteTaskRequest) ProtoMessage() {}

func (x *UncompleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompleteTaskRequest.ProtoReflect.Descriptor instead.
func (*UncompleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{12}
}

func (x *UncompleteTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UncompleteTaskRequest) GetUncompleteAncestors() bool {
	if x != nil {
		return x.UncompleteAncestors
	}
	return false
}

func (x *UncompleteTaskRequest) GetUncompleteDescendants() bool {
	if x != nil {
		return x.UncompleteDescendants
	}
	return false
}

type GetProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: projects/{project}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{13}
}

func (x *GetProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project to be created. The `name` field will be ignored. The `title`
	// field must not be empty.
	Project       *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{14}
}

func (x *CreateProjectRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type ListProjectsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The standard page size. Optional. If unspecified, the server will choose
	// a suitable default. Values larger than 1000 will be truncated to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The standard page token. Optional. Get the values from responses to
	// ListProjects.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Whether soft deleted resources should be included in the response.
	ShowDeleted   bool `protobuf:"varint,3,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{15}
}

func (x *ListProjectsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProjectsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListProjectsRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

type ListProjectsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The projects.
	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// The token required to get the next page in a subsequent call to
	// ListProjects.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	mi := &file_tasks_tasks_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{16}
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListProjectsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project to be updated. The `name` field is used to specify which
	// project to update. Only fields with non-default values will be updated,
	// as long as they are specified in `update_mask`.
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// A field mask of which fields to update. A nil or empty field mask will be
	// interpreted as updating all fields specified in `project`. Specifying a
	// single `*` means doing a full replacement of the project.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateProjectRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *UpdateProjectRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: projects/{project}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UndeleteProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: projects/{project}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndeleteProjectRequest) Reset() {
	*x = UndeleteProjectRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteProjectRequest) ProtoMessage() {}

func (x *UndeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*UndeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{19}
}

func (x *UndeleteProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ArchiveProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: projects/{project}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveProjectRequest) Reset() {
	*x = ArchiveProjectRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveProjectRequest) ProtoMessage() {}

func (x *ArchiveProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveProjectRequest.ProtoReflect.Descriptor instead.
func (*ArchiveProjectRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{20}
}

func (x *ArchiveProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UnarchiveProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: projects/{project}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnarchiveProjectRequest) Reset() {
	*x = UnarchiveProjectRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnarchiveProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnarchiveProjectRequest) ProtoMessage() {}

func (x *UnarchiveProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnarchiveProjectRequest.ProtoReflect.Descriptor instead.
func (*UnarchiveProjectRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{21}
}

func (x *UnarchiveProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetLabelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: labels/{label}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLabelRequest) Reset() {
	*x = GetLabelRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelRequest) ProtoMessage() {}

func (x *GetLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelRequest.ProtoReflect.Descriptor instead.
func (*GetLabelRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{22}
}

func (x *GetLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateLabelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The label to be created. The `name` field will be ignored. The `label`
	// field must not be empty.
	Label         *Label `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLabelRequest) Reset() {
	*x = CreateLabelRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabelRequest) ProtoMessage() {}

func (x *CreateLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabelRequest.ProtoReflect.Descriptor instead.
func (*CreateLabelRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{23}
}

func (x *CreateLabelRequest) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

type ListLabelsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The standard page size. Optional. If unspecified, the server will choose
	// a suitable default. Values larger than 1000 will be truncated to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The standard page token. Optional. Get the values from responses to
	// ListLabels.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLabelsRequest) Reset() {
	*x = ListLabelsRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsRequest) ProtoMessage() {}

func (x *ListLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsRequest.ProtoReflect.Descriptor instead.
func (*ListLabelsRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{24}
}

func (x *ListLabelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLabelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListLabelsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The labels.
	Labels []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// The token required to get the next page in a subsequent call to
	// ListLabels.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLabelsResponse) Reset() {
	*x = ListLabelsResponse{}
	mi := &file_tasks_tasks_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsResponse) ProtoMessage() {}

func (x *ListLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsResponse.ProtoReflect.Descriptor instead.
func (*ListLabelsResponse) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{25}
}

func (x *ListLabelsResponse) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListLabelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateLabelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The label to be updated. The `name` field is used to specify which
	// label to update. Only fields with non-default values will be updated,
	// as long as they are specified in `update_mask`.
	Label *Label `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// A field mask of which fields to update. A nil or empty field mask will be
	// interpreted as updating all fields specified in `label`. Specifying a
	// single `*` means doing a full replacement of the label.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLabelRequest) Reset() {
	*x = UpdateLabelRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelRequest) ProtoMessage() {}

func (x *UpdateLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabelRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateLabelRequest) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *UpdateLabelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteLabelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name.
	// Format: labels/{label}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLabelRequest) Reset() {
	*x = DeleteLabelRequest{}
	mi := &file_tasks_tasks_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelRequest) ProtoMessage() {}

func (x *DeleteLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tasks_tasks_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabelRequest) Descriptor() ([]byte, []int) {
	return file_tasks_tasks_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_tasks_tasks_proto protoreflect.FileDescriptor

const file_tasks_tasks_proto_rawDesc = "" +
	"\n" +
	"\x11tasks/tasks.proto\x12\x05tasks\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb7\x03\n" +
	"\x04Task\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06parent\x18\x02 \x01(\tR\x06parent\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x16\n" +
	"\x06labels\x18\x05 \x03(\tR\x06labels\x12?\n" +
	"\rcomplete_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\fcompleteTime\x12;\n" +
	"\vcreate_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12;\n" +
	"\vdelete_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"deleteTime\x12;\n" +
	"\vexpire_time\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expireTime\"\x88\x03\n" +
	"\aProject\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12;\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\x12;\n" +
	"\vdelete_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"deleteTime\x12;\n" +
	"\vexpire_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expireTime\x12=\n" +
	"\farchive_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\varchiveTime\"\xab\x01\n" +
	"\x05Label\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05label\x18\x02 \x01(\tR\x05label\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12;\n" +
	"\vupdate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"updateTime\"$\n" +
	"\x0eGetTaskRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"q\n" +
	"\x10ListTasksRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12!\n" +
	"\fshow_deleted\x18\x03 \x01(\bR\vshowDeleted\"^\n" +
	"\x11ListTasksResponse\x12!\n" +
	"\x05tasks\x18\x01 \x03(\v2\v.tasks.TaskR\x05tasks\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"4\n" +
	"\x11CreateTaskRequest\x12\x1f\n" +
	"\x04task\x18\x01 \x01(\v2\v.tasks.TaskR\x04task\"q\n" +
	"\x11UpdateTaskRequest\x12\x1f\n" +
	"\x04task\x18\x01 \x01(\v2\v.tasks.TaskR\x04task\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"=\n" +
	"\x11DeleteTaskRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"\x8b\x01\n" +
	"\x13UndeleteTaskRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12-\n" +
	"\x12undelete_ancestors\x18\x02 \x01(\bR\x11undeleteAncestors\x121\n" +
	"\x14undelete_descendants\x18\x03 \x01(\bR\x13undeleteDescendants\"?\n" +
	"\x13CompleteTaskRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"q\n" +
	"\x17ModifyTaskLabelsRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"add_labels\x18\x02 \x03(\tR\taddLabels\x12#\n" +
	"\rremove_labels\x18\x03 \x03(\tR\fremoveLabels\"\x95\x01\n" +
	"\x15UncompleteTaskRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x121\n" +
	"\x14uncomplete_ancestors\x18\x02 \x01(\bR\x13uncompleteAncestors\x125\n" +
	"\x16uncomplete_descendants\x18\x03 \x01(\bR\x15uncompleteDescendants\"'\n" +
	"\x11GetProjectRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"@\n" +
	"\x14CreateProjectRequest\x12(\n" +
	"\aproject\x18\x01 \x01(\v2\x0e.tasks.ProjectR\aproject\"t\n" +
	"\x13ListProjectsRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12!\n" +
	"\fshow_deleted\x18\x03 \x01(\bR\vshowDeleted\"j\n" +
	"\x14ListProjectsResponse\x12*\n" +
	"\bprojects\x18\x01 \x03(\v2\x0e.tasks.ProjectR\bprojects\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"}\n" +
	"\x14UpdateProjectRequest\x12(\n" +
	"\aproject\x18\x01 \x01(\v2\x0e.tasks.ProjectR\aproject\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"*\n" +
	"\x14DeleteProjectRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\",\n" +
	"\x16UndeleteProjectRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"+\n" +
	"\x15ArchiveProjectRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"-\n" +
	"\x17UnarchiveProjectRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"%\n" +
	"\x0fGetLabelRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"8\n" +
	"\x12CreateLabelRequest\x12\"\n" +
	"\x05label\x18\x01 \x01(\v2\f.tasks.LabelR\x05label\"O\n" +
	"\x11ListLabelsRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\"b\n" +
	"\x12ListLabelsResponse\x12$\n" +
	"\x06labels\x18\x01 \x03(\v2\f.tasks.LabelR\x06labels\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"u\n" +
	"\x12UpdateLabelRequest\x12\"\n" +
	"\x05label\x18\x01 \x01(\v2\f.tasks.LabelR\x05label\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"(\n" +
	"\x12DeleteLabelRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name2\xad\n" +
	"\n" +
	"\x05Tasks\x12-\n" +
	"\aGetTask\x12\x15.tasks.GetTaskRequest\x1a\v.tasks.Task\x12>\n" +
	"\tListTasks\x12\x17.tasks.ListTasksRequest\x1a\x18.tasks.ListTasksResponse\x123\n" +
	"\n" +
	"CreateTask\x12\x18.tasks.CreateTaskRequest\x1a\v.tasks.Task\x123\n" +
	"\n" +
	"UpdateTask\x12\x18.tasks.UpdateTaskRequest\x1a\v.tasks.Task\x123\n" +
	"\n" +
	"DeleteTask\x12\x18.tasks.DeleteTaskRequest\x1a\v.tasks.Task\x127\n" +
	"\fUndeleteTask\x12\x1a.tasks.UndeleteTaskRequest\x1a\v.tasks.Task\x127\n" +
	"\fCompleteTask\x12\x1a.tasks.CompleteTaskRequest\x1a\v.tasks.Task\x12;\n" +
	"\x0eUncompleteTask\x12\x1c.tasks.UncompleteTaskRequest\x1a\v.tasks.Task\x12?\n" +
	"\x10ModifyTaskLabels\x12\x1e.tasks.ModifyTaskLabelsRequest\x1a\v.tasks.Task\x126\n" +
	"\n" +
	"GetProject\x12\x18.tasks.GetProjectRequest\x1a\x0e.tasks.Project\x12G\n" +
	"\fListProjects\x12\x1a.tasks.ListProjectsRequest\x1a\x1b.tasks.ListProjectsResponse\x12<\n" +
	"\rCreateProject\x12\x1b.tasks.CreateProjectRequest\x1a\x0e.tasks.Project\x12<\n" +
	"\rUpdateProject\x12\x1b.tasks.UpdateProjectRequest\x1a\x0e.tasks.Project\x12<\n" +
	"\rDeleteProject\x12\x1b.tasks.DeleteProjectRequest\x1a\x0e.tasks.Project\x12@\n" +
	"\x0fUndeleteProject\x12\x1d.tasks.UndeleteProjectRequest\x1a\x0e.tasks.Project\x12>\n" +
	"\x0eArchiveProject\x12\x1c.tasks.ArchiveProjectRequest\x1a\x0e.tasks.Project\x12B\n" +
	"\x10UnarchiveProject\x12\x1e.tasks.UnarchiveProjectRequest\x1a\x0e.tasks.Project\x120\n" +
	"\bGetLabel\x12\x16.tasks.GetLabelRequest\x1a\f.tasks.Label\x12A\n" +
	"\n" +
	"ListLabels\x12\x18.tasks.ListLabelsRequest\x1a\x19.tasks.ListLabelsResponse\x126\n" +
	"\vCreateLabel\x12\x19.tasks.CreateLabelRequest\x1a\f.tasks.Label\x126\n" +
	"\vUpdateLabel\x12\x19.tasks.UpdateLabelRequest\x1a\f.tasks.Label\x12@\n" +
	"\vDeleteLabel\x12\x19.tasks.DeleteLabelRequest\x1a\x16.google.protobuf.EmptyB\"Z go.saser.se/tasks/tasks_go_protob\x06proto3"

var (
	file_tasks_tasks_proto_rawDescOnce sync.Once
	file_tasks_tasks_proto_rawDescData []byte
)

func file_tasks_tasks_proto_rawDescGZIP() []byte {
	file_tasks_tasks_proto_rawDescOnce.Do(func() {
		file_tasks_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tasks_tasks_proto_rawDesc), len(file_tasks_tasks_proto_rawDesc)))
	})
	return file_tasks_tasks_proto_rawDescData
}

var file_tasks_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_tasks_tasks_proto_goTypes = []any{
	(*Task)(nil),                    // 0: tasks.Task
	(*Project)(nil),                 // 1: tasks.Project
	(*Label)(nil),                   // 2: tasks.Label
	(*GetTaskRequest)(nil),          // 3: tasks.GetTaskRequest
	(*ListTasksRequest)(nil),        // 4: tasks.ListTasksRequest
	(*ListTasksResponse)(nil),       // 5: tasks.ListTasksResponse
	(*CreateTaskRequest)(nil),       // 6: tasks.CreateTaskRequest
	(*UpdateTaskRequest)(nil),       // 7: tasks.UpdateTaskRequest
	(*DeleteTaskRequest)(nil),       // 8: tasks.DeleteTaskRequest
	(*UndeleteTaskRequest)(nil),     // 9: tasks.UndeleteTaskRequest
	(*CompleteTaskRequest)(nil),     // 10: tasks.CompleteTaskRequest
	(*ModifyTaskLabelsRequest)(nil), // 11: tasks.ModifyTaskLabelsRequest
	(*UncompleteTaskRequest)(nil),   // 12: tasks.UncompleteTaskRequest
	(*GetProjectRequest)(nil),       // 13: tasks.GetProjectRequest
	(*CreateProjectRequest)(nil),    // 14: tasks.CreateProjectRequest
	(*ListProjectsRequest)(nil),     // 15: tasks.ListProjectsRequest
	(*ListProjectsResponse)(nil),    // 16: tasks.ListProjectsResponse
	(*UpdateProjectRequest)(nil),    // 17: tasks.UpdateProjectRequest
	(*DeleteProjectRequest)(nil),    // 18: tasks.DeleteProjectRequest
	(*UndeleteProjectRequest)(nil),  // 19: tasks.UndeleteProjectRequest
	(*ArchiveProjectRequest)(nil),   // 20: tasks.ArchiveProjectRequest
	(*UnarchiveProjectRequest)(nil), // 21: tasks.UnarchiveProjectRequest
	(*GetLabelRequest)(nil),         // 22: tasks.GetLabelRequest
	(*CreateLabelRequest)(nil),      // 23: tasks.CreateLabelRequest
	(*ListLabelsRequest)(nil),       // 24: tasks.ListLabelsRequest
	(*ListLabelsResponse)(nil),      // 25: tasks.ListLabelsResponse
	(*UpdateLabelRequest)(nil),      // 26: tasks.UpdateLabelRequest
	(*DeleteLabelRequest)(nil),      // 27: tasks.DeleteLabelRequest
	(*timestamppb.Timestamp)(nil),   // 28: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),   // 29: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),           // 30: google.protobuf.Empty
}
var file_tasks_tasks_proto_depIdxs = []int32{
	28, // 0: tasks.Task.complete_time:type_name -> google.protobuf.Timestamp
	28, // 1: tasks.Task.create_time:type_name -> google.protobuf.Timestamp
	28, // 2: tasks.Task.update_time:type_name -> google.protobuf.Timestamp
	28, // 3: tasks.Task.delete_time:type_name -> google.protobuf.Timestamp
	28, // 4: tasks.Task.expire_time:type_name -> google.protobuf.Timestamp
	28, // 5: tasks.Project.create_time:type_name -> google.protobuf.Timestamp
	28, // 6: tasks.Project.update_time:type_name -> google.protobuf.Timestamp
	28, // 7: tasks.Project.delete_time:type_name -> google.protobuf.Timestamp
	28, // 8: tasks.Project.expire_time:type_name -> google.protobuf.Timestamp
	28, // 9: tasks.Project.archive_time:type_name -> google.protobuf.Timestamp
	28, // 10: tasks.Label.create_time:type_name -> google.protobuf.Timestamp
	28, // 11: tasks.Label.update_time:type_name -> google.protobuf.Timestamp
	0,  // 12: tasks.ListTasksResponse.tasks:type_name -> tasks.Task
	0,  // 13: tasks.CreateTaskRequest.task:type_name -> tasks.Task
	0,  // 14: tasks.UpdateTaskRequest.task:type_name -> tasks.Task
	29, // 15: tasks.UpdateTaskRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 16: tasks.CreateProjectRequest.project:type_name -> tasks.Project
	1,  // 17: tasks.ListProjectsResponse.projects:type_name -> tasks.Project
	1,  // 18: tasks.UpdateProjectRequest.project:type_name -> tasks.Project
	29, // 19: tasks.UpdateProjectRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 20: tasks.CreateLabelRequest.label:type_name -> tasks.Label
	2,  // 21: tasks.ListLabelsResponse.labels:type_name -> tasks.Label
	2,  // 22: tasks.UpdateLabelRequest.label:type_name -> tasks.Label
	29, // 23: tasks.UpdateLabelRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 24: tasks.Tasks.GetTask:input_type -> tasks.GetTaskRequest
	4,  // 25: tasks.Tasks.ListTasks:input_type -> tasks.ListTasksRequest
	6,  // 26: tasks.Tasks.CreateTask:input_type -> tasks.CreateTaskRequest
	7,  // 27: tasks.Tasks.UpdateTask:input_type -> tasks.UpdateTaskRequest
	8,  // 28: tasks.Tasks.DeleteTask:input_type -> tasks.DeleteTaskRequest
	9,  // 29: tasks.Tasks.UndeleteTask:input_type -> tasks.UndeleteTaskRequest
	10, // 30: tasks.Tasks.CompleteTask:input_type -> tasks.CompleteTaskRequest
	12, // 31: tasks.Tasks.UncompleteTask:input_type -> tasks.UncompleteTaskRequest
	11, // 32: tasks.Tasks.ModifyTaskLabels:input_type -> tasks.ModifyTaskLabelsRequest
	13, // 33: tasks.Tasks.GetProject:input_type -> tasks.GetProjectRequest
	15, // 34: tasks.Tasks.ListProjects:input_type -> tasks.ListProjectsRequest
	14, // 35: tasks.Tasks.CreateProject:input_type -> tasks.CreateProjectRequest
	17, // 36: tasks.Tasks.UpdateProject:input_type -> tasks.UpdateProjectRequest
	18, // 37: tasks.Tasks.DeleteProject:input_type -> tasks.DeleteProjectRequest
	19, // 38: tasks.Tasks.UndeleteProject:input_type -> tasks.UndeleteProjectRequest
	20, // 39: tasks.Tasks.ArchiveProject:input_type -> tasks.ArchiveProjectRequest
	21, // 40: tasks.Tasks.UnarchiveProject:input_type -> tasks.UnarchiveProjectRequest
	22, // 41: tasks.Tasks.GetLabel:input_type -> tasks.GetLabelRequest
	24, // 42: tasks.Tasks.ListLabels:input_type -> tasks.ListLabelsRequest
	23, // 43: tasks.Tasks.CreateLabel:input_type -> tasks.CreateLabelRequest
	26, // 44: tasks.Tasks.UpdateLabel:input_type -> tasks.UpdateLabelRequest
	27, // 45: tasks.Tasks.DeleteLabel:input_type -> tasks.DeleteLabelRequest
	0,  // 46: tasks.Tasks.GetTask:output_type -> tasks.Task
	5,  // 47: tasks.Tasks.ListTasks:output_type -> tasks.ListTasksResponse
	0,  // 48: tasks.Tasks.CreateTask:output_type -> tasks.Task
	0,  // 49: tasks.Tasks.UpdateTask:output_type -> tasks.Task
	0,  // 50: tasks.Tasks.DeleteTask:output_type -> tasks.Task
	0,  // 51: tasks.Tasks.UndeleteTask:output_type -> tasks.Task
	0,  // 52: tasks.Tasks.CompleteTask:output_type -> tasks.Task
	0,  // 53: tasks.Tasks.UncompleteTask:output_type -> tasks.Task
	0,  // 54: tasks.Tasks.ModifyTaskLabels:output_type -> tasks.Task
	1,  // 55: tasks.Tasks.GetProject:output_type -> tasks.Project
	16, // 56: tasks.Tasks.ListProjects:output_type -> tasks.ListProjectsResponse
	1,  // 57: tasks.Tasks.CreateProject:output_type -> tasks.Project
	1,  // 58: tasks.Tasks.UpdateProject:output_type -> tasks.Project
	1,  // 59: tasks.Tasks.DeleteProject:output_type -> tasks.Project
	1,  // 60: tasks.Tasks.UndeleteProject:output_type -> tasks.Project
	1,  // 61: tasks.Tasks.ArchiveProject:output_type -> tasks.Project
	1,  // 62: tasks.Tasks.UnarchiveProject:output_type -> tasks.Project
	2,  // 63: tasks.Tasks.GetLabel:output_type -> tasks.Label
	25, // 64: tasks.Tasks.ListLabels:output_type -> tasks.ListLabelsResponse
	2,  // 65: tasks.Tasks.CreateLabel:output_type -> tasks.Label
	2,  // 66: tasks.Tasks.UpdateLabel:output_type -> tasks.Label
	30, // 67: tasks.Tasks.DeleteLabel:output_type -> google.protobuf.Empty
	46, // [46:68] is the sub-list for method output_type
	24, // [24:46] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_tasks_tasks_proto_init() }
func file_tasks_tasks_proto_init() {
	if File_tasks_tasks_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tasks_tasks_proto_rawDesc), len(file_tasks_tasks_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tasks_tasks_proto_goTypes,
		DependencyIndexes: file_tasks_tasks_proto_depIdxs,
		MessageInfos:      file_tasks_tasks_proto_msgTypes,
	}.Build()
	File_tasks_tasks_proto = out.File
	file_tasks_tasks_proto_goTypes = nil
	file_tasks_tasks_proto_depIdxs = nil
}
