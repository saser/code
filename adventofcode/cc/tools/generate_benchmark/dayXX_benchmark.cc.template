#include "{{.HeaderFile}}"

#include "adventofcode/cc/trim.h"

#include "absl/status/statusor.h"
#include "absl/strings/str_format.h"
#include "absl/strings/string_view.h"
#include "benchmark/benchmark.h"

{{ if (ne .Part1Func "") -}}
static void BM_Part1(benchmark::State& state, absl::string_view input, absl::string_view want) {
  absl::StatusOr<std::string> got = {{.Namespace}}::{{.Part1Func}}(input);
  if (!got.ok()) {
    state.SkipWithError(got.status().ToString().c_str());
    return;
  }
  if (*got != want) {
    state.SkipWithError(absl::StrFormat("got \"%s\"; want \"%s\"", *got, want).c_str());
    return;
  }
  for (auto _ : state) {
    benchmark::DoNotOptimize({{.Namespace}}::{{.Part1Func}}(input));
  }
}
{{- range .Part1Pairs }}
BENCHMARK_CAPTURE(BM_Part1, {{.File}}, R"({{.Input}})", adventofcode::cc::trim::TrimSpace(R"({{.Output}})"));
{{- end }}
{{- end }}

{{ if (ne .Part2Func "") -}}
static void BM_Part2(benchmark::State& state, absl::string_view input, absl::string_view want) {
  absl::StatusOr<std::string> got = {{.Namespace}}::{{.Part2Func}}(input);
  if (!got.ok()) {
    state.SkipWithError(got.status().ToString().c_str());
    return;
  }
  if (*got != want) {
    state.SkipWithError(absl::StrFormat("got \"%s\"; want \"%s\"", *got, want).c_str());
    return;
  }
  for (auto _ : state) {
    benchmark::DoNotOptimize({{.Namespace}}::{{.Part2Func}}(input));
  }
}
{{- range .Part2Pairs }}
BENCHMARK_CAPTURE(BM_Part2, {{.File}}, R"({{.Input}})", adventofcode::cc::trim::TrimSpace(R"({{.Output}})"));
{{- end }}
{{- end }}
