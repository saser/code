{{ with $top := . -}}
#include "{{$top.HeaderFile}}"

#include <string>

#include "absl/status/statusor.h"
#include "adventofcode/cc/trim.h"
#include "gtest/gtest.h"

{{ range $pair := $top.Part1Pairs }}
TEST(Part1Test, {{$pair.Name}}) {
  const std::string& input = R"({{$pair.In}})";
  const std::string& want = R"({{$pair.Out}})";
  const absl::StatusOr<std::string> got = {{$top.Namespace}}::{{$top.Part1Func}}(input);
  ASSERT_TRUE(got.ok()) << "Solve: " << got.status();
  EXPECT_EQ(*got, adventofcode::cc::trim::TrimSpace(want));
}
{{ end }}

{{ range $pair := $top.Part2Pairs }}
TEST(Part2Test, {{$pair.Name}}) {
  const std::string& input = R"({{$pair.In}})";
  const std::string& want = R"({{$pair.Out}})";
  const absl::StatusOr<std::string> got = {{$top.Namespace}}::{{$top.Part2Func}}(input);
  ASSERT_TRUE(got.ok()) << "Solve: " << got.status();
  EXPECT_EQ(*got, adventofcode::cc::trim::TrimSpace(want));
}
{{ end }}
{{- end }}
